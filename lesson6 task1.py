from sys import getsizeof

"""
Временная сложность - O(n), так как присутствует цикл for, время выполнения которого, зависит от длины введенного числа.

Пространственная сложность - O(1), так как размер(в байтах) не зависит от длины введенного числа, т.е. результаты вычислений являются
единственным числом, хранящимся в памяти.
"""


num = 34560
even_counter = 0
odd_counter = 0
for i in str(num):
    if int(i) % 2 == 0:
        even_counter += 1
    else:
        odd_counter += 1
print(f'количество четных цифр в числе {num}: {even_counter}\nколичество нечетных цифр в числе {num}: {odd_counter}')
print(f'{getsizeof(even_counter)}')
print(f'{getsizeof(odd_counter)}\n')

"""
Временная сложность - O(n^2), так как присутствует вложенный цикл for.

Пространственная сложность - O(n), так как создаётся словарь, размер которого зависит от количества поступивших данных(в данном случае
диапазона).
"""

res = {}
for i in range(2, 10):
    res[i] = []
    for n in range(2, 100):
        if n % i == 0:
            res[i].append(n)
    print(f'для числа {i} количество кратных чисел - {len(res[i])}')
print(f'{getsizeof(res)}\n')


"""
оптимизированный вариант, приведенного выше примера
Временная сложность - O(n^2)
Пространственная сложность - O(1)
"""
for i in range(2, 10):
    res = 0
    n = 2
    while n <= 99:
        if n % i == 0:
            res += 1
        n += 1
    print(f'для числа {i} количество кратных чисел - {res}')
print(getsizeof(res))
